{"version":3,"sources":["logo.svg","api/index.js","store/index.js","components/container/index.jsx","components/search-input/index.jsx","components/hero/index.jsx","components/image-thumbnail/index.jsx","components/image-grid/index.jsx","hooks/use-window-resize.js","components/modal/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["apiInstance","axios","create","ACCESS_KEY","Authorization","defaults","baseURL","headers","post","common","fetchContentApi","a","get","res","data","console","error","searchContentApi","keywords","useStore","history","useHistory","React","searchValue","setSearchValue","fetchPhotos","useQuery","searchPhotos","useMutation","query","pathname","location","isLoading","mutate","substring","resource","results","isFetching","onSearch","event","preventDefault","push","onChange","target","value","Container","props","children","maxWidth","rootStyle","width","style","SearchInput","className","onSubmit","role","onClick","type","autoComplete","placeholder","Hero","ImageThumbnail","display","height","backgroundColor","src","urls","regular","alt","user","name","ImageGrid","readyToRender","setReadyToRender","gridRef","size","useState","undefined","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","dataList","Array","isArray","fill","resizeGridItem","item","grid","current","rowHeight","parseInt","getComputedStyle","getPropertyValue","rowGap","rowSpan","Math","ceil","querySelector","getBoundingClientRect","gridRowEnd","setTimeout","allItems","getElementsByClassName","x","length","resizeAllGridItems","ref","map","j","toString","fontWeight","textAlign","reactQueryClient","QueryClient","App","Root","QueryClientProvider","client","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b2ddb33.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from \"axios\";\n\nconst apiInstance = axios.create();\nconst ACCESS_KEY = \"5ja_A-ozjl0L6VNG85ea0rDlZWHk2CGMlhsRC8b0TDM\";\n\nconst Authorization = `CLIENT-ID ${ACCESS_KEY}`;\napiInstance.defaults.baseURL = \"https://api.unsplash.com/\";\napiInstance.defaults.headers.post[\"Content-Type\"] = \"application/jon\";\napiInstance.defaults.headers.common[\"Authorization\"] = Authorization;\nexport const fetchContentApi = async () => {\n  try {\n    const res = await apiInstance.get(`/photos?client_id=${ACCESS_KEY}`);\n    return res.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const searchContentApi = async (keywords) => {\n  try {\n    const res = await apiInstance.get(\n      `/search/photos?query=${keywords}&client_id=${ACCESS_KEY}`\n    );\n    return res.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","import { useQuery, useMutation } from \"react-query\";\nimport { useHistory } from \"react-router-dom\";\nimport { fetchContentApi, searchContentApi } from \"../api/index\";\nimport * as React from \"react\";\n\nconst useStore = () => {\n  const history = useHistory();\n  const [selectedPhoto, setSelectedPhoto] = React.useState(null);\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState(\"\");\n  const fetchPhotos = useQuery(\"photos\", fetchContentApi);\n  const searchPhotos = useMutation((query) => searchContentApi(query));\n\n  const pathname = history.location.pathname;\n\n  React.useEffect(() => {\n    if (\n      pathname !== \"/\" &&\n      pathname !== \"/mini-unsplash/\" &&\n      !searchPhotos.data &&\n      !searchPhotos.isLoading\n    ) {\n      searchPhotos.mutate(pathname.substring(1));\n    }\n  }, [pathname, searchPhotos]);\n\n  const resource = React.useMemo(\n    () =>\n      pathname === \"/\" || pathname === \"/mini-unsplash/\"\n        ? fetchPhotos.data\n        : searchPhotos.data?.results,\n    [searchPhotos, pathname, fetchPhotos]\n  );\n\n  const isFetching = React.useMemo(\n    () =>\n      pathname === \"/\" || pathname === \"/mini-unsplash/\"\n        ? fetchPhotos.isFetching\n        : searchPhotos.isLoading,\n    [searchPhotos, pathname, fetchPhotos]\n  );\n\n  const onChange = (event) => {\n    setSearchValue(event.target.value);\n  };\n\n  const onSearch = (event) => {\n    event.preventDefault();\n    history.push(`/${searchValue}`);\n  };\n\n  return {\n    resource,\n    isFetching,\n    onSearch,\n    onChange,\n    searchValue,\n  };\n};\n\nexport default useStore;\n","import * as React from \"react\";\n\nconst Container = (props) => {\n  const { children, maxWidth } = props;\n  const rootStyle = {\n    maxWidth: maxWidth ?? \"980px\",\n    width: \"100%\",\n  };\n  return <div style={rootStyle}>{children}</div>;\n};\n\nexport default Container;\n","import * as React from \"react\";\nimport { Search as SearchIcon } from \"react-feather\";\nimport useStore from \"../../store\";\nimport \"./search-input.css\";\n\nconst SearchInput = () => {\n  const { searchValue, onChange, onSearch } = useStore();\n\n  const searchIcon = {\n    color: \"#767676\",\n  };\n\n  return (\n    <form className=\"searchInput__root\" onSubmit={onSearch}>\n      <div role=\"button\" className=\"searchInput__button\" onClick={onSearch}>\n        <SearchIcon className=\"searchInput__icon\" />\n      </div>\n      <div className=\"searchInput__input-container\">\n        <input\n          type=\"search\"\n          autoComplete=\"off\"\n          className=\"searchInput__input\"\n          placeholder=\"Search for photo\"\n          value={searchValue}\n          onChange={onChange}\n        />\n      </div>\n    </form>\n  );\n};\n\nexport default SearchInput;\n","import * as React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Container from \"../container\";\nimport SearchInput from \"../search-input\";\nimport \"./hero.css\";\n\nconst Hero = () => {\n  const history = useHistory();\n  const pathname = history.location.pathname;\n\n  return (\n    <div className=\"hero__centralize hero__root\">\n      <Container>\n        {pathname === \"/\" ||\n          (pathname === \"/mini-unsplash/\" && <SearchInput />)}\n        {pathname !== \"/\" && pathname !== \"/mini-unsplash/\" && (\n          <h1>Search Results for \"{pathname.substring(1)}\"</h1>\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default Hero;\n","import * as React from \"react\";\nimport \"./image-thumbnail.css\";\n\nconst ImageThumbnail = ({ isFetching, data, display }) => {\n  return (\n    <>\n      {isFetching && (\n        <div className=\"item\">\n          <div className=\"content\">\n            <div\n              style={{\n                width: \"100%\",\n                height: \"22em\",\n                backgroundColor: \"#eee\",\n              }}\n            ></div>\n          </div>\n        </div>\n      )}\n\n      {!isFetching && (\n        <div className=\"item\">\n          <div className=\"content\">\n            <img\n              src={data?.urls?.regular}\n              alt=\"thumbnail\"\n              style={{ width: \"100%\" }}\n            />\n            <div className=\"imageThumbnail__outer\">\n              <div className=\"imageThumbnail__overlay\">\n                <p className={\"imageThumbnail__primary-text\"}>\n                  {data?.user?.name}\n                </p>\n                <p className={\"imageThumbnail__secondary-text\"}>\n                  {data?.user?.location}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ImageThumbnail;\n","import * as React from \"react\";\nimport Container from \"../container\";\nimport ImageThumbnail from \"../image-thumbnail\";\nimport useWindowSize from \"../../hooks/use-window-resize\";\nimport \"./image-grid.css\";\n\nconst ImageGrid = (props) => {\n  const { data, isFetching } = props;\n  const [readyToRender, setReadyToRender] = React.useState(false);\n  const gridRef = React.useRef(null);\n  const size = useWindowSize();\n  let dataList = !isFetching && Array.isArray(data) ? data : Array(6).fill({});\n\n  React.useLayoutEffect(() => {\n    function resizeGridItem(item) {\n      let grid = gridRef.current;\n      let rowHeight = parseInt(\n        window.getComputedStyle(grid).getPropertyValue(\"grid-auto-rows\")\n      );\n      let rowGap = parseInt(\n        window.getComputedStyle(grid).getPropertyValue(\"grid-row-gap\")\n      );\n\n      let rowSpan = Math.ceil(\n        (item.querySelector(\".content\").getBoundingClientRect().height +\n          rowGap) /\n          (rowHeight + rowGap)\n      );\n      item.style.gridRowEnd = \"span \" + rowSpan;\n    }\n\n    function resizeAllGridItems() {\n      const allItems = gridRef.current.getElementsByClassName(\"item\");\n      for (let x = 0; x < allItems.length; x++) {\n        resizeGridItem(allItems[x]);\n      }\n    }\n\n    setTimeout(() => {\n      resizeAllGridItems();\n      setReadyToRender(true);\n    }, 500);\n  }, [gridRef, isFetching, setReadyToRender, size]);\n\n  return (\n    // <Animate\n    //   play={readyToRender}\n    //   start={{ opacity: 0, filter: \"blur(10px)\" }}\n    //   end={{ opacity: 1, filter: \"blur(0)\" }}\n    //   duration={0.5}\n    // >\n    <div className=\"imageGrid__centralize imageGrid__root\">\n      <Container maxWidth=\"900px\">\n        <div className=\"grid\" ref={gridRef}>\n          {dataList.map((item, j) => {\n            return (\n              <ImageThumbnail\n                key={j.toString()}\n                data={item}\n                isFetching={isFetching}\n                display={readyToRender}\n              />\n            );\n          })}\n        </div>\n        {dataList.length === 0 && (\n          <div style={{ width: \"100%\" }}>\n            <h1 style={{ fontWeight: 200, textAlign: \"center\" }}>\n              No results found\n            </h1>\n          </div>\n        )}\n      </Container>\n    </div>\n    // </Animate>\n  );\n};\n\nexport default ImageGrid;\n","// Hook\nimport { useEffect, useState } from \"react\";\nexport default function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n","import \"./modal.css\";\nimport React, { useRef, useCallback } from \"react\";\nimport usePortal from \"react-useportal\";\n// import { Close } from \"react-feather\";\n\nexport const useModal = ({ onOpen, onClose, background, ...config } = {}) => {\n  const modalStyle = `\n    position: fixed;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%,-50%);\n    z-index: 1000;\n  `;\n\n  const backgroundStyle = `\n    position: absolute;\n    background: ${background || \"transparent\"};\n    width: 100vw;\n    height: 100vh;\n    top: 0;\n    left: 0;\n    z-index: 1000;\n  `;\n\n  const modal = useRef();\n\n  const { isOpen, togglePortal, openPortal, closePortal, Portal } = usePortal({\n    onOpen(event) {\n      const { portal } = event;\n      // eslint-disable-next-line no-param-reassign\n      portal.current.style.cssText = background ? backgroundStyle : modalStyle;\n      if (onOpen) onOpen(event);\n    },\n    onClose(event) {\n      const { portal } = event;\n      // eslint-disable-next-line no-param-reassign\n      portal.current.removeAttribute(\"style\");\n      if (onClose) onClose(event);\n    },\n    onPortalClick({ target }) {\n      const clickingOutsideModal =\n        modal && modal.current && !modal.current.contains(target);\n      if (clickingOutsideModal) closePortal();\n    },\n    ...config,\n  });\n\n  const ModalWithBackground = useCallback(\n    (props) => (\n      <Portal>\n        <div ref={modal} style={parseCSSText(modalStyle)} {...props} />\n      </Portal>\n    ),\n    [modalStyle]\n  );\n\n  const Modal = background ? ModalWithBackground : Portal;\n\n  return Object.assign([openPortal, closePortal, isOpen, Modal, togglePortal], {\n    Modal,\n    toggleModal: togglePortal,\n    openModal: openPortal,\n    closeModal: closePortal,\n    isOpen,\n  });\n};\n\nfunction parseCSSText(cssText) {\n  const cssTxt = cssText.replace(/\\/\\*(.|\\s)*?\\*\\//g, \" \").replace(/\\s+/g, \" \");\n  const style = {};\n  const rule = (cssTxt.match(/ ?(.*?) ?{([^}]*)}/) || [])[2] || cssTxt;\n  const cssToJs = (s) =>\n    s.replace(/\\W+\\w/g, (match) => match.slice(-1).toUpperCase());\n  const properties = rule\n    .split(\";\")\n    .map((o) => o.split(\":\").map((x) => x && x.trim()));\n  // eslint-disable-next-line no-restricted-syntax\n  for (const [property, value] of properties) style[cssToJs(property)] = value;\n  return style;\n}\n\nconst Modal = () => {\n  // look in useModal.js to see the use of usePortal\n  const { openModal, closeModal, isOpen, Modal } = useModal({\n    background: \"rgba(0, 0, 0, 0.5)\",\n  });\n\n  return (\n    <Modal>\n      <div className=\"modal__root\">\n        <div className=\"modal__content\">\n          <div>{/* <Close /> */}</div>\n          <h1> hello worl</h1>\n        </div>\n      </div>\n    </Modal>\n  );\n};\nexport default Modal;\n","import logo from \"./logo.svg\";\nimport * as React from \"react\";\nimport { Search as SearchIcon } from \"react-feather\";\nimport useStore from \"./store\";\nimport Hero from \"./components/hero\";\nimport ImageGrid from \"./components/image-grid\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { BrowserRouter as Router, Route, useHistory } from \"react-router-dom\";\nimport { Animate } from \"react-simple-animate\";\nimport Modal from \"./components/modal\";\n\nimport \"./index.css\";\n\n// const styles = {\n//   centralize: {\n//     display: \"flex\",\n//     justifyContent: \"center\",\n//     alignItems: \"center\",\n//   },\n// };\n// const { assign } = Object;\n\n// const Hero = () => {\n//   const history = useHistory();\n//   const rootStyle = assign(\n//     {\n//       width: \"100%\",\n//       position: \"relative\",\n//       height: \"25em\",\n//       backgroundColor: \"#CCC\",\n//     },\n//     styles.centralize\n//   );\n//   const pathname = history.location.pathname;\n//   return (\n//     <div style={rootStyle}>\n//       <Container>\n//         {pathname === \"/\" && <SearchInput />}\n//         {pathname !== \"/\" && (\n//           <h1>Search Results for \"{pathname.substring(1)}\"</h1>\n//         )}\n//       </Container>\n//     </div>\n//   );\n// };\n\n// const Container = (props) => {\n//   const { children, maxWidth } = props;\n//   const rootStyle = {\n//     maxWidth: maxWidth ?? \"980px\",\n//     width: \"100%\",\n//   };\n//   return <div style={rootStyle}>{children}</div>;\n// };\n\n// const SearchInput = () => {\n//   const { searchValue, onChange, onSearch } = useStore();\n//   const rootStyle = {\n//     width: \"80%\",\n//     margin: \"0 auto\",\n//     height: \"3em\",\n//     backgroundColor: \"#fff\",\n//     border: \"1px solid transparent\",\n//     borderRadius: \"5px\",\n//     display: \"flex\",\n//     alignItems: \"center\",\n//     padding: \"0 16px\",\n//   };\n\n//   const searchIcon = {\n//     color: \"#767676\",\n//   };\n\n//   const inputStyle = {\n//     width: \"100%\",\n//     flexGrow: 1,\n//     display: \"flex\",\n//     height: \"100%\",\n//     border: \"none\",\n//     outline: \"none\",\n//     fontSize: \"20px\",\n//     borderShadow: \"none\",\n//   };\n\n//   const inputContainerStyle = {\n//     flex: 1,\n//     position: \"relative\",\n//     width: \"100%\",\n//     display: \"flex\",\n//     paddingLeft: \"16px\",\n//     height: \"3em\",\n//   };\n\n//   const searchButtonStyle = {\n//     cursor: \"pointer\",\n//   };\n\n//   return (\n//     <form style={rootStyle} onSubmit={onSearch}>\n//       <div role=\"button\" style={searchButtonStyle} onClick={onSearch}>\n//         <SearchIcon style={searchIcon} />\n//       </div>\n//       <div style={inputContainerStyle}>\n//         <input\n//           type=\"search\"\n//           autoComplete=\"off\"\n//           style={inputStyle}\n//           placeholder=\"Search for photo\"\n//           value={searchValue}\n//           onChange={onChange}\n//         />\n//       </div>\n//     </form>\n//   );\n// };\n\n// const ImageGrid = (props) => {\n//   const { data = Array(6).fill({}), isFetching } = props;\n//   const [readyToRender, setReadyToRender] = React.useState(false);\n//   const gridRef = React.useRef(null);\n//   const rootStyle = assign(\n//     {\n//       width: \"80%\",\n//       margin: \"0 auto\",\n//       height: \"auto\",\n//       position: \"relative\",\n//       top: \"-5em\",\n//       zIndex: 2,\n//     },\n\n//     styles.centralize\n//   );\n\n//   React.useLayoutEffect(() => {\n//     function resizeGridItem(item) {\n//       // let grid = document.getElementsByClassName(\"grid\")[0];\n//       let grid = gridRef.current;\n//       let rowHeight = parseInt(\n//         window.getComputedStyle(grid).getPropertyValue(\"grid-auto-rows\")\n//       );\n//       let rowGap = parseInt(\n//         window.getComputedStyle(grid).getPropertyValue(\"grid-row-gap\")\n//       );\n\n//       let rowSpan = Math.ceil(\n//         (item.querySelector(\".content\").getBoundingClientRect().height +\n//           rowGap) /\n//           (rowHeight + rowGap)\n//       );\n//       item.style.gridRowEnd = \"span \" + rowSpan;\n//     }\n\n//     function resizeAllGridItems() {\n//       const allItems = gridRef.current.getElementsByClassName(\"item\");\n//       for (let x = 0; x < allItems.length; x++) {\n//         resizeGridItem(allItems[x]);\n//       }\n//     }\n\n//     setTimeout(() => {\n//       resizeAllGridItems();\n//       setReadyToRender(true);\n//     }, 300);\n//   }, [gridRef, isFetching, setReadyToRender]);\n\n//   return (\n//     // <Animate\n//     //   play={readyToRender}\n//     //   start={{ opacity: 0, filter: \"blur(10px)\" }}\n//     //   end={{ opacity: 1, filter: \"blur(0)\" }}\n//     //   duration={0.5}\n//     // >\n//     <div style={rootStyle}>\n//       <Container maxWidth=\"900px\">\n//         <div className=\"grid\" ref={gridRef}>\n//           {data.map((item, j) => {\n//             return (\n//               <ImageThumbnail\n//                 key={j.toString()}\n//                 data={item}\n//                 isFetching={isFetching}\n//                 display={readyToRender}\n//               />\n//             );\n//           })}\n//         </div>\n//       </Container>\n//     </div>\n//     // </Animate>\n//   );\n// };\n\n// const ImageThumbnail = ({ isFetching, data, display }) => {\n//   return (\n//     <>\n//       {isFetching && (\n//         <div className=\"item\">\n//           <div className=\"content\">\n//             <div\n//               style={{\n//                 width: \"100%\",\n//                 height: \"22em\",\n//                 backgroundColor: \"#eee\",\n//               }}\n//             ></div>\n//           </div>\n//         </div>\n//       )}\n\n//       {!isFetching && (\n//         <div\n//           className=\"item\"\n//           style={{ opacity: 1, transition: \"all 5s\", transitionDelay: \"10s\" }}\n//         >\n//           <div className=\"content\">\n//             <img\n//               src={data?.urls?.regular}\n//               alt=\"thumbnail\"\n//               style={{ width: \"100%\" }}\n//             />\n//             <div\n//               style={{\n//                 position: \"sticky\",\n//                 width: \"100%\",\n//                 zIndex: 1,\n//                 top: \"100%\",\n//                 // marginBottom: \"-5em\",\n//               }}\n//             >\n//               <div\n//                 style={{\n//                   position: \"absolute\",\n//                   backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n//                   backgroundImage:\n//                     \"linear-gradient(180deg, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.9))\",\n//                   display: \"flex\",\n//                   width: \"97.5%\",\n//                   flexDirection: \"column\",\n//                   height: \"auto\",\n//                   top: \"-7em\",\n//                   padding: \"8px 4px\",\n//                 }}\n//               >\n//                 <p\n//                   style={{\n//                     fontSize: \"18px\",\n//                     color: \"#fff\",\n//                     paddingLeft: \"8px\",\n//                   }}\n//                 >\n//                   {data?.user?.name}\n//                 </p>\n//                 <p\n//                   style={{\n//                     padding: \"0 4px 0 8px\",\n//                     fontSize: \"16px\",\n//                     color: \"#fff\",\n//                   }}\n//                 >\n//                   {data?.user?.location}\n//                 </p>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// const Modal = () => {};\n\nconst reactQueryClient = new QueryClient();\n\nfunction App() {\n  const { resource, isFetching } = useStore();\n\n  return (\n    <div>\n      {/* <Modal /> */}\n      <Hero />\n      <ImageGrid data={resource} isFetching={isFetching} />\n    </div>\n  );\n}\n\nfunction Root() {\n  return (\n    <QueryClientProvider client={reactQueryClient}>\n      <Router>\n        <Route exact path=\"/\">\n          <App />\n        </Route>\n\n        <Route exact path=\"/:search\">\n          <App />\n        </Route>\n      </Router>\n    </QueryClientProvider>\n  );\n}\n\nexport default Root;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}